"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const minecraft_motd_util_1 = require("minecraft-motd-util");
const Packet_1 = __importDefault(require("./structure/Packet"));
const resolveSRV_1 = __importDefault(require("./util/resolveSRV"));
const UDPSocket_1 = __importDefault(require("./structure/UDPSocket"));
const ipAddressRegEx = /^\d{1,3}(\.\d{1,3}){3}$/;
let sessionCounter = 0;
function applyDefaultOptions(options) {
    // Apply the provided options on the default options
    return Object.assign({
        port: 25565,
        timeout: 1000 * 5,
        enableSRV: true,
        sessionID: ++sessionCounter
    }, options);
}
/**
 * Performs a full query on the server using the UDP protocol.
 * @param {string} host The host of the server
 * @param {QueryOptions} [options] The options to use when performing the query
 * @returns {Promise<FullQueryResponse>} The full query response data
 * @async
 */
function queryFull(host, options) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    return __awaiter(this, void 0, void 0, function* () {
        // Applies the provided options on top of the default options
        const opts = applyDefaultOptions(options);
        // Assert that the arguments are the correct type and format
        (0, assert_1.default)(typeof host === 'string', `Expected 'host' to be a string, got ${typeof host}`);
        (0, assert_1.default)(host.length > 0, 'Expected \'host\' to have content, got an empty string');
        (0, assert_1.default)(typeof options === 'object' || typeof options === 'undefined', `Expected 'options' to be an object or undefined, got ${typeof options}`);
        (0, assert_1.default)(typeof opts === 'object', `Expected 'options' to be an object, got ${typeof opts}`);
        (0, assert_1.default)(typeof opts.port === 'number', `Expected 'options.port' to be a number, got ${typeof opts.port}`);
        (0, assert_1.default)(opts.port > 0, `Expected 'options.port' to be greater than 0, got ${opts.port}`);
        (0, assert_1.default)(opts.port < 65536, `Expected 'options.port' to be less than 65536, got ${opts.port}`);
        (0, assert_1.default)(Number.isInteger(opts.port), `Expected 'options.port' to be an integer, got ${opts.port}`);
        (0, assert_1.default)(typeof opts.timeout === 'number', `Expected 'options.timeout' to be a number, got ${typeof opts.timeout}`);
        (0, assert_1.default)(opts.timeout > 0, `Expected 'options.timeout' to be greater than 0, got ${opts.timeout}`);
        (0, assert_1.default)(typeof opts.sessionID === 'number', `Expected 'options.sessionID' to be a number, got ${typeof opts.sessionID}`);
        (0, assert_1.default)(opts.sessionID > 0, `Expected 'options.sessionID' to be greater than 0, got ${opts.sessionID}`);
        (0, assert_1.default)(opts.sessionID < 0xFFFFFFFF, `Expected 'options.sessionID' to be less than ${0xFFFFFFFF}, got ${opts.sessionID}`);
        (0, assert_1.default)(Number.isInteger(opts.sessionID), `Expected 'options.sessionID' to be an integer, got ${opts.sessionID}`);
        (0, assert_1.default)(typeof opts.enableSRV === 'boolean', `Expected 'options.enableSRV' to be a boolean, got ${typeof opts.enableSRV}`);
        // Only the last 4 bits of each byte is used when sending a session ID
        opts.sessionID &= 0x0F0F0F0F;
        let challengeToken;
        let srvRecord = null;
        // Automatically resolve from host (e.g. play.hypixel.net) into a connect-able address
        if (opts.enableSRV && !ipAddressRegEx.test(host)) {
            srvRecord = yield (0, resolveSRV_1.default)(host);
        }
        const startTime = Date.now();
        let socket;
        try {
            // Create a new UDP connection to the specified address
            socket = new UDPSocket_1.default((_a = srvRecord === null || srvRecord === void 0 ? void 0 : srvRecord.host) !== null && _a !== void 0 ? _a : host, opts.port, opts.timeout);
            {
                // Create a Handshake packet and send it to the server
                // https://wiki.vg/Query#Request
                const requestPacket = new Packet_1.default();
                requestPacket.writeByte(0xFE, 0xFD, 0x09);
                requestPacket.writeIntBE(opts.sessionID);
                yield socket.writePacket(requestPacket);
            }
            {
                // Read the response packet for the Handshake from the server
                // https://wiki.vg/Query#Response
                const responsePacket = yield socket.readPacket();
                const type = responsePacket.readByte();
                const sessionID = responsePacket.readIntBE();
                challengeToken = parseInt(responsePacket.readStringNT());
                if (type !== 0x09)
                    throw new Error('Server sent an invalid payload type');
                if (sessionID !== opts.sessionID)
                    throw new Error('Session ID in response did not match client session ID');
                if (isNaN(challengeToken))
                    throw new Error('Server sent an invalid challenge token');
            }
            {
                // Create a Full Stat Request packet and send it to the server
                // https://wiki.vg/Query#Request_3
                const requestPacket = new Packet_1.default();
                requestPacket.writeByte(0xFE, 0xFD, 0x00);
                requestPacket.writeIntBE(opts.sessionID);
                requestPacket.writeIntBE(challengeToken);
                requestPacket.writeByte(0x00, 0x00, 0x00, 0x00);
                yield socket.writePacket(requestPacket);
            }
            const players = [];
            let gameType, version, software, levelName, plugins, onlinePlayers, maxPlayers, description;
            {
                // Create an empty map of key,value pairs for the response
                const map = new Map();
                // Read the response packet for the Full stat from the server
                const responsePacket = yield socket.readPacket();
                const type = responsePacket.readByte();
                const sessionID = responsePacket.readIntBE();
                if (type !== 0x00)
                    throw new Error('Server sent an invalid payload type');
                if (sessionID !== opts.sessionID)
                    throw new Error('Session ID in response did not match client session ID');
                responsePacket.readBytes(11);
                let key;
                while ((key = responsePacket.readStringNT()) !== '') {
                    map.set(key, responsePacket.readStringNT());
                }
                responsePacket.readBytes(10);
                let player;
                while ((player = responsePacket.readStringNT()) !== '') {
                    players.push(player);
                }
                const pluginsRaw = (map.get('plugins') || '').split(';');
                gameType = (_b = map.get('gametype')) !== null && _b !== void 0 ? _b : null;
                version = (_c = map.get('version')) !== null && _c !== void 0 ? _c : null;
                software = (_d = pluginsRaw[0]) !== null && _d !== void 0 ? _d : null;
                plugins = pluginsRaw.slice(1);
                levelName = (_e = map.get('map')) !== null && _e !== void 0 ? _e : null;
                onlinePlayers = (_f = parseInt(map.get('numplayers') || '')) !== null && _f !== void 0 ? _f : null;
                maxPlayers = (_g = parseInt(map.get('maxplayers') || '')) !== null && _g !== void 0 ? _g : null;
                description = (0, minecraft_motd_util_1.parse)((_h = map.get('motd')) !== null && _h !== void 0 ? _h : '');
            }
            return {
                host,
                port: opts.port,
                srvRecord,
                gameType,
                version,
                software,
                plugins,
                levelName,
                onlinePlayers,
                maxPlayers,
                players,
                motd: {
                    raw: (0, minecraft_motd_util_1.format)(description),
                    clean: (0, minecraft_motd_util_1.clean)(description),
                    html: (0, minecraft_motd_util_1.toHTML)(description)
                },
                roundTripLatency: Date.now() - startTime
            };
        }
        finally {
            // Destroy the socket, it is no longer needed
            yield (socket === null || socket === void 0 ? void 0 : socket.destroy());
        }
    });
}
exports.default = queryFull;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnlGdWxsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3F1ZXJ5RnVsbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBLG9EQUE0QjtBQUM1Qiw2REFBbUU7QUFDbkUsZ0VBQXdDO0FBQ3hDLG1FQUEwRDtBQUUxRCxzRUFBOEM7QUFHOUMsTUFBTSxjQUFjLEdBQUcseUJBQXlCLENBQUM7QUFDakQsSUFBSSxjQUFjLEdBQUcsQ0FBQyxDQUFDO0FBRXZCLFNBQVMsbUJBQW1CLENBQUMsT0FBc0I7SUFDbEQsb0RBQW9EO0lBQ3BELE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUNwQixJQUFJLEVBQUUsS0FBSztRQUNYLE9BQU8sRUFBRSxJQUFJLEdBQUcsQ0FBQztRQUNqQixTQUFTLEVBQUUsSUFBSTtRQUNmLFNBQVMsRUFBRSxFQUFFLGNBQWM7S0FDRCxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3ZDLENBQUM7QUFFRDs7Ozs7O0dBTUc7QUFDSCxTQUE4QixTQUFTLENBQUMsSUFBWSxFQUFFLE9BQXNCOzs7UUFDM0UsNkRBQTZEO1FBQzdELE1BQU0sSUFBSSxHQUFHLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRTFDLDREQUE0RDtRQUM1RCxJQUFBLGdCQUFNLEVBQUMsT0FBTyxJQUFJLEtBQUssUUFBUSxFQUFFLHVDQUF1QyxPQUFPLElBQUksRUFBRSxDQUFDLENBQUM7UUFDdkYsSUFBQSxnQkFBTSxFQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLHdEQUF3RCxDQUFDLENBQUM7UUFDbEYsSUFBQSxnQkFBTSxFQUFDLE9BQU8sT0FBTyxLQUFLLFFBQVEsSUFBSSxPQUFPLE9BQU8sS0FBSyxXQUFXLEVBQUUsd0RBQXdELE9BQU8sT0FBTyxFQUFFLENBQUMsQ0FBQztRQUNoSixJQUFBLGdCQUFNLEVBQUMsT0FBTyxJQUFJLEtBQUssUUFBUSxFQUFFLDJDQUEyQyxPQUFPLElBQUks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