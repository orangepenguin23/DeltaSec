"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const minecraft_motd_util_1 = require("minecraft-motd-util");
/**
 * Formats the raw response from a status request into a more useable format
 * @param {string} host The host of the server
 * @param {number} port The port of the server
 * @param {SRVRecord | null} srvRecord The SRV lookup data
 * @param {number} protocolVersion The protocol version returned from the server
 * @param {string} version The version string of the server
 * @param {string} motd The MOTD of the server
 * @param {number} onlinePlayers The amount of players in the server
 * @param {number} maxPlayers The maximum amount of players in the server
 * @returns {StatusResponse} The formatted result
 */
function formatResultFE01FA(host, port, srvRecord, protocolVersion, version, motd, onlinePlayers, maxPlayers, roundTripLatency) {
    (0, assert_1.default)(typeof host === 'string', 'Expected host to be a string, got ' + typeof host);
    (0, assert_1.default)(host.length > 0, 'Expected host.length > 0, got ' + host.length);
    (0, assert_1.default)(typeof port === 'number', 'Expected port to be a number, got ' + typeof port);
    (0, assert_1.default)(Number.isInteger(port), 'Expected port to be an integer, got ' + port);
    (0, assert_1.default)(port > 0, 'Expected port > 0, got ' + port);
    (0, assert_1.default)(port < 65536, 'Expected port < 65536, got ' + port);
    (0, assert_1.default)(typeof protocolVersion === 'number', 'Expected protocolVersion to be a number, got ' + typeof protocolVersion);
    (0, assert_1.default)(Number.isInteger(protocolVersion), 'Expected protocolVersion to be an integer, got ' + protocolVersion);
    (0, assert_1.default)(protocolVersion >= 0, 'Expected protocolVersion >= 0, got ' + protocolVersion);
    (0, assert_1.default)(typeof version === 'string', 'Expected version to be a string, got ' + typeof version);
    (0, assert_1.default)(version.length > 0, 'Expected version.length > 0, got ' + version.length);
    (0, assert_1.default)(typeof onlinePlayers === 'number', 'Expected onlinePlayers to be a number, got ' + typeof onlinePlayers);
    (0, assert_1.default)(Number.isInteger(onlinePlayers), 'Expected onlinePlayers to be an integer, got ' + onlinePlayers);
    (0, assert_1.default)(typeof maxPlayers === 'number', 'Expected maxPlayers to be a number, got ' + typeof maxPlayers);
    (0, assert_1.default)(Number.isInteger(maxPlayers), 'Expected maxPlayers to be an integer, got ' + maxPlayers);
    const description = (0, minecraft_motd_util_1.parse)(motd);
    return {
        host,
        port,
        srvRecord,
        version,
        protocolVersion,
        onlinePlayers,
        maxPlayers,
        samplePlayers: null,
        motd: description ? {
            raw: (0, minecraft_motd_util_1.format)(description),
            clean: (0, minecraft_motd_util_1.clean)(description),
            html: (0, minecraft_motd_util_1.toHTML)(description)
        } : null,
        favicon: null,
        modInfo: null,
        rawResponse: null,
        roundTripLatency
    };
}
exports.default = formatResultFE01FA;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0UmVzdWx0RkUwMUZBLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWwvZm9ybWF0UmVzdWx0RkUwMUZBLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsb0RBQTRCO0FBQzVCLDZEQUFtRTtBQUluRTs7Ozs7Ozs7Ozs7R0FXRztBQUNILFNBQVMsa0JBQWtCLENBQUMsSUFBWSxFQUFFLElBQVksRUFBRSxTQUEyQixFQUFFLGVBQXVCLEVBQUUsT0FBZSxFQUFFLElBQVksRUFBRSxhQUFxQixFQUFFLFVBQWtCLEVBQUUsZ0JBQXdCO0lBQy9NLElBQUEsZ0JBQU0sRUFBQyxPQUFPLElBQUksS0FBSyxRQUFRLEVBQUUsb0NBQW9DLEdBQUcsT0FBTyxJQUFJLENBQUMsQ0FBQztJQUNyRixJQUFBLGdCQUFNLEVBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsZ0NBQWdDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hFLElBQUEsZ0JBQU0sRUFBQyxPQUFPLElBQUksS0FBSyxRQUFRLEVBQUUsb0NBQW9DLEdBQUcsT0FBTyxJQUFJLENBQUMsQ0FBQztJQUNyRixJQUFBLGdCQUFNLEVBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxzQ0FBc0MsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUM5RSxJQUFBLGdCQUFNLEVBQUMsSUFBSSxHQUFHLENBQUMsRUFBRSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUNuRCxJQUFBLGdCQUFNLEVBQUMsSUFBSSxHQUFHLEtBQUssRUFBRSw2QkFBNkIsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUMzRCxJQUFBLGdCQUFNLEVBQUMsT0FBTyxlQUFlLEtBQUssUUFBUSxFQUFFLCtDQUErQyxHQUFHLE9BQU8sZUFBZSxDQUFDLENBQUM7SUFDdEgsSUFBQSxnQkFBTSxFQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLEVBQUUsaURBQWlELEdBQUcsZUFBZSxDQUFDLENBQUM7SUFDL0csSUFBQSxnQkFBTSxFQUFDLGVBQWUsSUFBSSxDQUFDLEVBQUUscUNBQXFDLEdBQUcsZUFBZSxDQUFDLENBQUM7SUFDdEYsSUFBQSxnQkFBTSxFQUFDLE9BQU8sT0FBTyxLQUFLLFFBQVEsRUFBRSx1Q0FBdUMsR0FBRyxPQUFPLE9BQU8sQ0FBQyxDQUFDO0lBQzlGLElBQUEsZ0JBQU0sRUFBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxtQ0FBbUMsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDakYsSUFBQSxnQkFBTSxFQUFDLE9BQU8sYUFBYSxLQUFLLFFBQVEsRUFBRSw2Q0FBNkMsR0FBRyxPQUFPLGFBQWEsQ0FBQyxDQUFDO0lBQ2hILElBQUEsZ0JBQU0sRUFBQyxNQUFNLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxFQUFFLCtDQUErQyxHQUFHLGFBQWEsQ0FBQyxDQUFDO0lBQ3pHLElBQUEsZ0JBQU0sRUFBQyxPQUFPLFVBQVUsS0FBSyxRQUFRLEVBQUUsMENBQTBDLEdBQUcsT0FBTyxVQUFVLENBQUMsQ0FBQztJQUN2RyxJQUFBLGdCQUFNLEVBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsRUFBRSw0Q0FBNEMsR0FBRyxVQUFVLENBQUMsQ0FBQztJQUVoRyxNQUFNLFdBQVcsR0FBRyxJQUFBLDJCQUFLLEVBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsT0FBTztRQUNOLElBQUk7UUFDSixJQUFJO1FBQ0osU0FBUztRQUNULE9BQU87UUFDUCxlQUFlO1FBQ2YsYUFBYTtRQUNiLFVBQVU7UUFDVixhQUFhLEVBQUUsSUFBSTtRQUNuQixJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQztZQUNuQixHQUFHLEVBQUUsSUFBQSw0QkFBTSxFQUFDLFdBQVcsQ0FBQztZQUN4QixLQUFLLEVBQUUsSUFBQSwyQkFBSyxFQUFDLFdBQVcsQ0FBQztZQUN6QixJQUFJLEVBQUUsSUFBQSw0QkFBTSxFQUFDLFdBQVcsQ0FBQztTQUN6QixDQUFDLENBQUMsQ0FBQyxJQUFJO1FBQ1IsT0FBTyxFQUFFLElBQUk7UUFDYixPQUFPLEVBQUUsSUFBSTtRQUNiLFdBQVcsRUFBRSxJQUFJO1FBQ2pCLGdCQUFnQjtLQUNoQixDQUFDO0FBQ0gsQ0FBQztBQUVELGtCQUFlLGtCQUFrQixDQUFDIn0=