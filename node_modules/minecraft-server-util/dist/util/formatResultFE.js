"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const minecraft_motd_util_1 = require("minecraft-motd-util");
/**
 * Formats the raw response from a status request into a more useable format
 * @param {string} host The host of the server
 * @param {number} port The port of the server
 * @param {SRVRecord | null} srvRecord The SRV lookup data
 * @param {string} motd The MOTD of the server
 * @param {number} onlinePlayers The amount of online players
 * @param {number} maxPlayers The maximum amount of players
 * @returns {StatusResponse} The formatted result
 */
function formatResultFE(host, port, srvRecord, motd, onlinePlayers, maxPlayers, roundTripLatency) {
    (0, assert_1.default)(typeof host === 'string', 'Expected host to be a string, got ' + typeof host);
    (0, assert_1.default)(host.length > 0, 'Expected host.length > 0, got ' + host.length);
    (0, assert_1.default)(typeof port === 'number', 'Expected port to be a number, got ' + typeof port);
    (0, assert_1.default)(Number.isInteger(port), 'Expected port to be an integer, got ' + port);
    (0, assert_1.default)(port > 0, 'Expected port > 0, got ' + port);
    (0, assert_1.default)(port < 65536, 'Expected port < 65536, got ' + port);
    (0, assert_1.default)(typeof onlinePlayers === 'number', 'Expected onlinePlayers to be a number, got ' + typeof onlinePlayers);
    (0, assert_1.default)(Number.isInteger(onlinePlayers), 'Expected onlinePlayers to be an integer, got ' + onlinePlayers);
    (0, assert_1.default)(typeof maxPlayers === 'number', 'Expected maxPlayers to be a number, got ' + typeof maxPlayers);
    (0, assert_1.default)(Number.isInteger(maxPlayers), 'Expected maxPlayers to be an integer, got ' + maxPlayers);
    (0, assert_1.default)(typeof roundTripLatency === 'number', 'Expected roundTripLatency to be a number, got ' + typeof roundTripLatency);
    (0, assert_1.default)(Number.isInteger(roundTripLatency), 'Expected roundTripLatency to be an integer, got ' + roundTripLatency);
    (0, assert_1.default)(roundTripLatency >= 0, 'Expected roundTripLatency >= 0, got ' + port);
    const description = (0, minecraft_motd_util_1.parse)(motd);
    return {
        host,
        port,
        srvRecord,
        version: null,
        protocolVersion: null,
        onlinePlayers,
        maxPlayers,
        samplePlayers: null,
        motd: description ? {
            raw: (0, minecraft_motd_util_1.format)(description),
            clean: (0, minecraft_motd_util_1.clean)(description),
            html: (0, minecraft_motd_util_1.toHTML)(description)
        } : null,
        favicon: null,
        modInfo: null,
        rawResponse: null,
        roundTripLatency
    };
}
exports.default = formatResultFE;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0UmVzdWx0RkUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbC9mb3JtYXRSZXN1bHRGRS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLG9EQUE0QjtBQUM1Qiw2REFBbUU7QUFJbkU7Ozs7Ozs7OztHQVNHO0FBQ0gsU0FBUyxjQUFjLENBQUMsSUFBWSxFQUFFLElBQVksRUFBRSxTQUEyQixFQUFFLElBQVksRUFBRSxhQUFxQixFQUFFLFVBQWtCLEVBQUUsZ0JBQXdCO0lBQ2pLLElBQUEsZ0JBQU0sRUFBQyxPQUFPLElBQUksS0FBSyxRQUFRLEVBQUUsb0NBQW9DLEdBQUcsT0FBTyxJQUFJLENBQUMsQ0FBQztJQUNyRixJQUFBLGdCQUFNLEVBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsZ0NBQWdDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hFLElBQUEsZ0JBQU0sRUFBQyxPQUFPLElBQUksS0FBSyxRQUFRLEVBQUUsb0NBQW9DLEdBQUcsT0FBTyxJQUFJLENBQUMsQ0FBQztJQUNyRixJQUFBLGdCQUFNLEVBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxzQ0FBc0MsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUM5RSxJQUFBLGdCQUFNLEVBQUMsSUFBSSxHQUFHLENBQUMsRUFBRSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUNuRCxJQUFBLGdCQUFNLEVBQUMsSUFBSSxHQUFHLEtBQUssRUFBRSw2QkFBNkIsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUMzRCxJQUFBLGdCQUFNLEVBQUMsT0FBTyxhQUFhLEtBQUssUUFBUSxFQUFFLDZDQUE2QyxHQUFHLE9BQU8sYUFBYSxDQUFDLENBQUM7SUFDaEgsSUFBQSxnQkFBTSxFQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLEVBQUUsK0NBQStDLEdBQUcsYUFBYSxDQUFDLENBQUM7SUFDekcsSUFBQSxnQkFBTSxFQUFDLE9BQU8sVUFBVSxLQUFLLFFBQVEsRUFBRSwwQ0FBMEMsR0FBRyxPQUFPLFVBQVUsQ0FBQyxDQUFDO0lBQ3ZHLElBQUEsZ0JBQU0sRUFBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxFQUFFLDRDQUE0QyxHQUFHLFVBQVUsQ0FBQyxDQUFDO0lBQ2hHLElBQUEsZ0JBQU0sRUFBQyxPQUFPLGdCQUFnQixLQUFLLFFBQVEsRUFBRSxnREFBZ0QsR0FBRyxPQUFPLGdCQUFnQixDQUFDLENBQUM7SUFDekgsSUFBQSxnQkFBTSxFQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxrREFBa0QsR0FBRyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ2xILElBQUEsZ0JBQU0sRUFBQyxnQkFBZ0IsSUFBSSxDQUFDLEVBQUUsc0NBQXNDLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFFN0UsTUFBTSxXQUFXLEdBQUcsSUFBQSwyQkFBSyxFQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDLE9BQU87UUFDTixJQUFJO1FBQ0osSUFBSTtRQUNKLFNBQVM7UUFDVCxPQUFPLEVBQUUsSUFBSTtRQUNiLGVBQWUsRUFBRSxJQUFJO1FBQ3JCLGFBQWE7UUFDYixVQUFVO1FBQ1YsYUFBYSxFQUFFLElBQUk7UUFDbkIsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFDbkIsR0FBRyxFQUFFLElBQUEsNEJBQU0sRUFBQyxXQUFXLENBQUM7WUFDeEIsS0FBSyxFQUFFLElBQUEsMkJBQUssRUFBQyxXQUFXLENBQUM7WUFDekIsSUFBSSxFQUFFLElBQUEsNEJBQU0sRUFBQyxXQUFXLENBQUM7U0FDekIsQ0FBQyxDQUFDLENBQUMsSUFBSTtRQUNSLE9BQU8sRUFBRSxJQUFJO1FBQ2IsT0FBTyxFQUFFLElBQUk7UUFDYixXQUFXLEVBQUUsSUFBSTtRQUNqQixnQkFBZ0I7S0FDaEIsQ0FBQztBQUNILENBQUM7QUFFRCxrQkFBZSxjQUFjLENBQUMifQ==