"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const events_1 = require("events");
const resolveSRV_1 = __importDefault(require("../util/resolveSRV"));
const TCPSocket_1 = __importDefault(require("./TCPSocket"));
const Packet_1 = __importDefault(require("./Packet"));
const util_1 = require("util");
const encoder = new util_1.TextEncoder();
const decoder = new util_1.TextDecoder('utf-8');
const ipAddressRegEx = /^\d{1,3}(\.\d{1,3}){3}$/;
function applyDefaultOptions(options) {
    // Apply the provided options on the default options
    return Object.assign({
        port: 25575,
        password: '',
        timeout: 1000 * 15,
        enableSRV: true
    }, options);
}
/**
 * A utility class for executing commands remotely on a Minecraft server.
 * @class
 * @extends {EventEmitter}
 * @implements {RCONEvents}
 */
class RCON extends events_1.EventEmitter {
    /**
     * Creates a new RCON class with the host and options
     * @param {string} host The host of the server
     * @param {RCONOptions} [options] The options for the RCON client
     * @constructor
     */
    constructor(host, options) {
        super();
        this.socket = null;
        const opts = applyDefaultOptions(options);
        (0, assert_1.default)(typeof host === 'string', `Expected 'host' to be a string, got ${typeof host}`);
        (0, assert_1.default)(host.length > 0, `Expected host.length > 0, got ${host.length}`);
        (0, assert_1.default)(typeof opts.port === 'number', `Expected 'options.port' to be a number, got ${typeof opts.port}`);
        (0, assert_1.default)(opts.port > 0, `Expected 'options.port' to be greater than 0, got ${opts.port}`);
        (0, assert_1.default)(opts.port < 65536, `Expected 'options.port' to be less than 65536, got ${opts.port}`);
        (0, assert_1.default)(Number.isInteger(opts.port), `Expected 'options.port' to be an integer, got ${opts.port}`);
        (0, assert_1.default)(typeof opts.enableSRV === 'boolean', `Expected 'options.enableSRV' to be a boolean, got ${typeof opts.enableSRV}`);
        (0, assert_1.default)(typeof opts.timeout === 'number', `Expected 'options.timeout' to be a number, got ${typeof opts.timeout}`);
        (0, assert_1.default)(opts.timeout > 0, `Expected 'options.timeout' to be greater than 0, got ${opts.timeout}`);
        (0, assert_1.default)(Number.isInteger(opts.timeout), `Expected 'options.timeout' to be an integer, got ${opts.timeout}`);
        (0, assert_1.default)(typeof opts.password === 'string', `Expected 'options.password' to be a string, got ${typeof opts.password}`);
        (0, assert_1.default)(opts.password.length > 0, `Expected options.password.length > 0, got ${opts.password.length}`);
        this.host = host;
        this.isLoggedIn = false;
        this.options = opts;
        this.requestID = 0;
    }
    /**
     * Connects to the server using TCP and sends the correct login packets.
     * @returns {Promise<void>} A Promise that resolves when it has successfully logged in
     * @async
     */
    connect() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            let srvRecord = null;
            // Automatically resolve a connectable address from a known address using SRV DNS records
            if (this.options.enableSRV && !ipAddressRegEx.test(this.host)) {
                srvRecord = yield (0, resolveSRV_1.default)(this.host);
            }
            // Create a TCP connection to the server and wait for it to connect
            this.socket = yield TCPSocket_1.default.connect((_a = srvRecord === null || srvRecord === void 0 ? void 0 : srvRecord.host) !== null && _a !== void 0 ? _a : this.host, (_b = srvRecord === null || srvRecord === void 0 ? void 0 : srvRecord.port) !== null && _b !== void 0 ? _b : this.options.port, this.options.timeout);
            {
                // Create a login packet and send it to the server
                // https://wiki.vg/RCON#3:_Login
                const loginPacket = new Packet_1.default();
                loginPacket.writeIntLE(10 + this.options.password.length);
                loginPacket.writeIntLE(++this.requestID);
                loginPacket.writeIntLE(3);
                loginPacket.writeString(this.options.password, false);
                loginPacket.writeByte(0x00, 0x00);
                yield this.socket.writePacket(loginPacket, false);
            }
            {
                // Wait for the next packet back, determine if the login was successful
                const length = yield this.socket.readIntLE();
                const requestID = yield this.socket.readIntLE();
                yield this.socket.readIntLE();
                if (requestID === -1)
                    throw new Error('Failed to connect to RCON, invalid password');
                yield this.socket.readBytes(length - 8);
            }
            this.isLoggedIn = true;
            process.nextTick(() => __awaiter(this, void 0, void 0, function* () {
                while (this.socket !== null) {
                    yield this._readPacket();
                }
            }));
        });
    }
    /**
     * Waits for the next incoming packet from the stream and parses it.
     * @returns {Promise<void>}
     * @async
     * @private
     */
    _readPacket() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.socket === null)
                return;
            const length = yield this.socket.readIntLE();
            const requestID = yield this.socket.readIntLE();
            const packetType = yield this.socket.readIntLE();
            switch (packetType) {
                case 0: {
                    let output = '';
                    if (length > 10) {
                        output = decoder.decode(yield this.socket.readBytes(length - 10));
                    }
                    this.emit('output', output);
                    this.emit(`output_${requestID}`, output);
                    yield this.socket.readBytes(2);
                    break;
                }
                default: {
                    yield this.socket.readBytes(length - 8);
                    this.emit('warning', 'Received an unknown packet type: ' + packetType);
                    break;
                }
            }
        });
    }
    /**
     * Executes commands on the server after it has successfully logged in
     * @param {string} command The command to execute
     * @returns {Promise<void>} The Promise that resolves whenever the command has executed
     * @async
     */
    run(command) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.socket === null || this.socket.socket.connecting)
                throw new Error('Socket has not connected yet, please run RCON#connect()');
            if (!this.isLoggedIn)
                throw new Error('Client is not logged in or login was unsuccessful, please run RCON#connect()');
            const commandBytes = encoder.encode(command);
            const commandPacket = new Packet_1.default();
            commandPacket.writeIntLE(10 + commandBytes.length);
            commandPacket.writeIntLE(++this.requestID);
            commandPacket.writeIntLE(2);
            commandPacket.writeBuffer(commandBytes);
            commandPacket.writeByte(0x00, 0x00);
            return this.socket.writePacket(commandPacket, false);
        });
    }
    /**
     * Executes commands on the server after it has successfully logged in and waits for the result of command execution
     * @param command The command to execute
     * @param timeout Maximum waiting time. Default: 5000
     * @returns
     */
    execute(command, timeout = 5000) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.socket === null || this.socket.socket.connecting)
                throw new Error('Socket has not connected yet, please run RCON#connect()');
            if (!this.isLoggedIn)
                throw new Error('Client is not logged in or login was unsuccessful, please run RCON#connect()');
            const commandBytes = encoder.encode(command);
            const requestID = ++this.requestID;
            const commandPacket = new Packet_1.default();
            commandPacket.writeIntLE(10 + commandBytes.length);
            commandPacket.writeIntLE(requestID);
            commandPacket.writeIntLE(2);
            commandPacket.writeBuffer(commandBytes);
            commandPacket.writeByte(0x00, 0x00);
            yield this.socket.writePacket(commandPacket, false);
            return new Promise((resolve, reject) => {
                const EVT_KEY = `output_${requestID}`;
                let complete = false;
                const timer = setTimeout(() => {
                    if (!complete) {
                        complete = true;
                        this.off(EVT_KEY, onResponse);
                        reject(new Error('RCON exec timeout'));
                    }
                }, timeout);
                const onResponse = (output) => {
                    if (!complete) {
                        clearTimeout(timer);
                        complete = true;
                        return resolve(output);
                    }
                };
                this.once(EVT_KEY, onResponse);
            });
        });
    }
    exec(command, timeout = 5000) {
        return this.execute(command, timeout);
    }
    /**
     * Closes the connection to the server
     * @returns {Promise<void>} A Promise that resolves when the connection has closed
     * @async
     */
    close() {
        if (this.socket === null)
            throw new Error('Socket is already closed');
        return this.socket.destroy();
    }
}
exports.default = RCON;
//# sourceMappingURL=data:application/json;base64,