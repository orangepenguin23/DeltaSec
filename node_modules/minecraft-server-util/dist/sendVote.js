"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const crypto_1 = __importDefault(require("crypto"));
const net_1 = __importDefault(require("net"));
const util_1 = require("util");
const decoder = new util_1.TextDecoder('utf8');
/**
 * Sends a Votifier v2 vote to the specified server
 * @param {SendVoteOptions} [options] The options to use when sending the vote
 * @returns {Promise<ScanLANResponse>} The response of the scan
 * @async
 */
function sendVote(options) {
    return __awaiter(this, void 0, void 0, function* () {
        // Assert that the arguments are the correct type and format
        (0, assert_1.default)(typeof options === 'object' || typeof options === 'undefined', `Expected 'options' to be an object or undefined, got ${typeof options}`);
        (0, assert_1.default)(typeof options === 'object', `Expected 'options' to be an object, got ${typeof options}`);
        (0, assert_1.default)(typeof options.host === 'string', `Expected 'options.host' to be a string, got ${typeof options.host}`);
        (0, assert_1.default)(options.host.length > 0, 'Expected \'options.host\' to have content, got an empty string');
        (0, assert_1.default)(typeof options.port === 'number', `Expected 'options.port' to be a number, got ${typeof options.port}`);
        (0, assert_1.default)(options.port > 0, `Expected 'options.port' to be greater than 0, got ${options.port}`);
        (0, assert_1.default)(options.port < 65536, `Expected 'options.port' to be less than 65536, got ${options.port}`);
        (0, assert_1.default)(Number.isInteger(options.port), `Expected 'options.port' to be an integer, got ${options.port}`);
        (0, assert_1.default)(typeof options.serviceName === 'string', `Expected 'options.serviceName' to be a string, got ${typeof options.serviceName}`);
        (0, assert_1.default)(options.serviceName.length > 0, 'Expected \'options.serviceName\' to have content, got an empty string');
        (0, assert_1.default)(typeof options.username === 'string', `Expected 'options.username' to be a string, got ${typeof options.username}`);
        (0, assert_1.default)(options.username.length > 2, `Expected 'options.username' to have a length greater than or equal to 3, got ${options.username.length}`);
        (0, assert_1.default)(options.username.length < 33, `Expected 'options.username' to have a length less than or equal to 32, got ${options.username.length}`);
        (0, assert_1.default)(/^[A-Za-z0-9_]+$/.test(options.username), `Expected 'options.username' to match allowed Minecraft username characters, got '${options.username}'`);
        (0, assert_1.default)(typeof options.timestamp === 'number' || typeof options.timestamp === 'undefined', `Expected 'options.timestamp' to be a number or undefined, got ${typeof options.timestamp}`);
        if (typeof options.timestamp !== 'undefined') {
            (0, assert_1.default)(options.timestamp > 0, `Expected 'options.timestamp' to be greater than or equal to 1, got ${options.timestamp}`);
        }
        (0, assert_1.default)(typeof options.uuid === 'undefined' || typeof options.uuid === 'string', `Expected 'options.uuid' to be either 'undefined' or a 'string', got '${typeof options.uuid}'`);
        (0, assert_1.default)(typeof options.timeout === 'number' || typeof options.timestamp === 'undefined', `Expected 'options.timeout' to be a number or undefined, got ${typeof options.timeout}`);
        if (typeof options.timeout !== 'undefined') {
            (0, assert_1.default)(options.timeout > 0, `Expected 'options.timeout' to be greater than 0, got ${options.timeout}`);
        }
        (0, assert_1.default)(typeof options.token === 'string', `Expected 'options.token' to be a string, got ${typeof options.token}`);
        (0, assert_1.default)(options.token.length > 0, 'Expected \'options.token\' to have content, got an empty string');
        return new Promise((resolve, reject) => {
            var _a, _b, _c;
            const conn = net_1.default.createConnection({ host: options.host, port: (_a = options.port) !== null && _a !== void 0 ? _a : 8192, timeout: (_b = options.timeout) !== null && _b !== void 0 ? _b : 1000 * 15 });
            conn.setTimeout((_c = options.timeout) !== null && _c !== void 0 ? _c : 1000 * 15);
            let state = 0;
            conn.on('data', (data) => {
                var _a;
                switch (state) {
                    case 0: {
                        const handshakeData = decoder.decode(data);
                        if (!handshakeData.startsWith('VOTIFIER')) {
                            conn.end();
                            return reject('Server sent an invalid handshake');
                        }
                        const split = handshakeData.split(' ');
                        if (parseInt(split[1]) !== 2) {
                            conn.end();
                            return reject('Unsupported server Votifier version');
                        }
                        state = 1;
                        const payload = {
                            serviceName: options.serviceName,
                            username: options.username,
                            address: options.host,
                            timestamp: (_a = options.timestamp) !== null && _a !== void 0 ? _a : Date.now(),
                            challenge: split[2].substring(0, split[2].length - 1)
                        };
                        if (options.uuid && options.uuid.length > 0) {
                            payload.uuid = options.uuid;
                        }
                        const payloadSerialized = JSON.stringify(payload);
                        const message = {
                            payload: payloadSerialized,
                            signature: ''
                        };
                        message.signature = crypto_1.default.createHmac('sha256', options.token).update(payloadSerialized).digest('base64');
                        const messageSerialized = JSON.stringify(message);
                        const buffer = Buffer.alloc(messageSerialized.length + 4);
                        buffer.writeUInt16BE(0x733a, 0);
                        buffer.writeUInt16BE(messageSerialized.length, 2);
                        buffer.write(messageSerialized, 4);
                        conn.write(buffer);
                        break;
                    }
                    case 1: {
                        conn.end();
                        try {
                            const result = JSON.parse(decoder.decode(data));
                            if (result.status === 'ok') {
                                resolve();
                            }
                            else {
                                reject(new Error(`Server returned an error: ${result.error}`));
                            }
                        }
                        catch (e) {
                            reject(e);
                        }
                    }
                }
            });
            conn.on('error', (error) => {
                conn.end();
                reject(error);
            });
            conn.on('close', () => {
                conn.end();
                reject('Socket prematurely closed');
            });
            conn.on('end', () => {
                conn.end();
                reject('Socket prematurely closed');
            });
            conn.on('timeout', () => {
                conn.end();
                reject('Connection to server timed out');
            });
        });
    });
}
exports.default = sendVote;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VuZFZvdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc2VuZFZvdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQSxvREFBNEI7QUFDNUIsb0RBQTRCO0FBQzVCLDhDQUFzQjtBQUN0QiwrQkFBbUM7QUFHbkMsTUFBTSxPQUFPLEdBQUcsSUFBSSxrQkFBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBZ0J4Qzs7Ozs7R0FLRztBQUNILFNBQThCLFFBQVEsQ0FBQyxPQUF3Qjs7UUFDOUQsNERBQTREO1FBQzVELElBQUEsZ0JBQU0sRUFBQyxPQUFPLE9BQU8sS0FBSyxRQUFRLElBQUksT0FBTyxPQUFPLEtBQUssV0FBVyxFQUFFLHdEQUF3RCxPQUFPLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDaEosSUFBQSxnQkFBTSxFQUFDLE9BQU8sT0FBTyxLQUFLLFFBQVEsRUFBRSwyQ0FBMkMsT0FBTyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQ2pHLElBQUEsZ0JBQU0sRUFBQyxPQUFPLE9BQU8sQ0FBQyxJQUFJLEtBQUssUUFBUSxFQUFFLCtDQUErQyxPQUFPLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQy9HLElBQUEsZ0JBQU0sRUFBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsZ0VBQWdFLENBQUMsQ0FBQztRQUNsRyxJQUFBLGdCQUFNLEVBQUMsT0FBTyxPQUFPLENBQUMsSUFBSSxLQUFLLFFBQVEsRUFBRSwrQ0FBK0MsT0FBTyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUMvRyxJQUFBLGdCQUFNLEVBQUMsT0FBTyxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUUscURBQXFELE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQzlGLElBQUEsZ0JBQU0sRUFBQyxPQUFPLENBQUMsSUFBSSxHQUFHLEtBQUssRUFBRSxzREFBc0QsT0FBTyxDQUFDLElB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